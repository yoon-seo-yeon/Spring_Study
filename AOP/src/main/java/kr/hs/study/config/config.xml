<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/aop
	    
	                    http://www.springframework.org/schema/aop/spring-aop.xsd">
	                    
   	<bean id = "t1" class = "kr.hs.study.beans.TestBean"/>
	<bean id = "advisor" class = "kr.hs.study.advice.AdvisorClass"/>
	
	<aop:config>
		<aop:aspect ref = "advisor"> <!-- advisor를 aspect모듈로 만듦 -->
			<aop:pointcut id = "point" expression = "execution(* method1())"/> <!-- pointcut 지정 : method1 -->
			<aop:before method = "beforeMethod" pointcut-ref = "point"/> 
			
			<!-- method1 실행 후에 afterMethod 실행하게끔 설정 -->
			<aop:after method = "afterMethod" pointcut-ref = "point"/>
			
			 <aop:around method = "aroundMethod" pointcut-ref = "point"/>
			
			<!-- 예외발생없이 종료 후 실행 -->
			<aop:after-returning method = "afterReturning" pointcut-ref = "point"/> 
			
			
			
		</aop:aspect>
	</aop:config>
</beans>